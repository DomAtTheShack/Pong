Index: src/Paddle.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.awt.*;\r\n\r\npublic class Paddle extends GameObject\r\n{\r\n\r\n    private final int startX;\r\n    private final int startY = 10;\r\n\r\n    public Paddle(int x, int y, ID id)\r\n    {\r\n        super(x, y, id);\r\n        if(id.equals(ID.P1Pabble))\r\n        {\r\n            startX = 10;\r\n        }else\r\n            startX = 100;\r\n\r\n    }\r\n\r\n    @Override\r\n    public void tick()\r\n    {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void render(Graphics g)\r\n    {\r\n        g.setColor(Color.BLACK);\r\n        g.fillRect(startX, startY, 20, 60);\r\n    }\r\n\r\n    @Override\r\n    public Rectangle getBounds()\r\n     {\r\n        return new Rectangle(x, y, 20, 60);\r\n    }\r\n}\r\n
===================================================================
diff --git a/src/Paddle.java b/src/Paddle.java
--- a/src/Paddle.java	
+++ b/src/Paddle.java	
@@ -3,17 +3,12 @@
 public class Paddle extends GameObject
 {
 
-    private final int startX;
-    private final int startY = 10;
+    private final short paddleWidth = 20;
+    private final short paddleHeight = 100;
 
     public Paddle(int x, int y, ID id)
     {
         super(x, y, id);
-        if(id.equals(ID.P1Pabble))
-        {
-            startX = 10;
-        }else
-            startX = 100;
 
     }
 
@@ -27,12 +22,12 @@
     public void render(Graphics g)
     {
         g.setColor(Color.BLACK);
-        g.fillRect(startX, startY, 20, 60);
+        g.fillRect(x, y, paddleWidth, paddleHeight);
     }
 
     @Override
     public Rectangle getBounds()
      {
-        return new Rectangle(x, y, 20, 60);
+        return new Rectangle(x, y, paddleWidth, paddleHeight);
     }
 }
Index: src/Game.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.image.BufferStrategy;\r\nimport java.awt.image.BufferedImage;\r\nimport java.io.IOException;\r\n\r\n\r\npublic class Game extends Canvas implements Runnable {\r\n\r\n    private static boolean isRunning = false;\r\n    private static Thread thread;\r\n    private Handler handler;\r\n\r\n    public Game() throws IOException {\r\n        new Window(1000,700,\"Pong\", this);\r\n        start();\r\n        handler = new Handler();\r\n        handler.addObject(new Paddle(100, 100, ID.P2Pabble));\r\n\r\n    }\r\n    public static void main(String[] args) throws IOException\r\n    {\r\n        new Game();\r\n    }\r\n\r\n    @Override\r\n    public void run() {\r\n        this.requestFocus();\r\n        final int targetFps = 60;\r\n        final long nanoSecondInterval = 1_000_000_000 / targetFps;\r\n        long lastTime = System.nanoTime();\r\n        long timer = System.currentTimeMillis();\r\n        int frames = 0;\r\n        int updates = 0;\r\n\r\n        while(isRunning) {\r\n            long now = System.nanoTime();\r\n            if(now - lastTime > nanoSecondInterval) {\r\n                tick();\r\n                updates++;\r\n                render();\r\n                frames++;\r\n                lastTime = now;\r\n            }\r\n\r\n            if(System.currentTimeMillis() - timer > 1000) {\r\n                timer += 1000;\r\n                System.out.println(\"Ticks: \" + updates + \", FPS:\" + frames);\r\n                frames = 0;\r\n                updates = 0;\r\n            }\r\n        }\r\n\r\n        try {\r\n            stop();\r\n        } catch (InterruptedException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n\r\n    public void render() {\r\n        BufferStrategy bs = this.getBufferStrategy();\r\n        if(bs == null) {\r\n            this.createBufferStrategy(3);\r\n            return;\r\n        }\r\n        Graphics g = bs.getDrawGraphics();\r\n        g.setColor(Color.white);\r\n        g.fillRect(0, 0, getWidth(), getHeight());\r\n        handler.render(g);\r\n\r\n        g.dispose();\r\n        bs.show();\r\n    }\r\n    public void tick(){\r\n    }\r\n    private void start(){\r\n        isRunning = true;\r\n        thread = new Thread(this);\r\n        thread.start();\r\n    }\r\n    private void stop() throws InterruptedException {\r\n        isRunning = false;\r\n        thread.join();\r\n    }\r\n}
===================================================================
diff --git a/src/Game.java b/src/Game.java
--- a/src/Game.java	
+++ b/src/Game.java	
@@ -9,13 +9,14 @@
 
     private static boolean isRunning = false;
     private static Thread thread;
-    private Handler handler;
+    private final Handler handler;
 
     public Game() throws IOException {
         new Window(1000,700,"Pong", this);
         start();
         handler = new Handler();
-        handler.addObject(new Paddle(100, 100, ID.P2Pabble));
+        handler.addObject(new Paddle(75, 300, ID.P2Pabble));
+        handler.addObject(new Paddle(900, 300, ID.P1Pabble));
 
     }
     public static void main(String[] args) throws IOException
